const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');
require('dotenv').config({ path: '.env.local' });

async function analyzeMissingBooks() {
  console.log('üîç Analyzing missing books in Google Sheets...\n');
  
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
    const auth = new JWT({
      email: process.env.GOOGLE_SHEETS_CLIENT_EMAIL,
      key: process.env.GOOGLE_SHEETS_PRIVATE_KEY?.replace(/\\n/g, '\n'),
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    
    const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEETS_SPREADSHEET_ID, auth);
    await doc.loadInfo();
    
    // –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç —Å –∫–Ω–∏–≥–∞–º–∏
    const booksSheet = doc.sheetsByTitle['–ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥'];
    if (!booksSheet) {
      throw new Error('Sheet "–ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥" not found');
    }
    
    console.log('üìä Loading book data from Google Sheets...');
    await booksSheet.loadHeaderRow();
    const allRows = await booksSheet.getRows();
    
    console.log(`üìö Total rows: ${allRows.length}\n`);
    
    // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥–∞
    const problemRows = [63, 65, 66, 70, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106];
    
    console.log(`üîç Analyzing ${problemRows.length} problem rows:\n`);
    
    problemRows.forEach(rowNum => {
      const index = rowNum - 2; // Google Sheets —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 2 (1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏)
      if (index >= 0 && index < allRows.length) {
        const row = allRows[index];
        
        const title = row.get('–ù–∞–∑–≤–∞') || '';
        const author = row.get('–ê–≤—Ç–æ—Ä') || '';
        const publisher = row.get('–í–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤–æ') || '';
        const category = row.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è') || '';
        
        console.log(`üìñ Row ${rowNum} (index ${index}):`);
        console.log(`   –ù–∞–∑–≤–∞: "${title}"`);
        console.log(`   –ê–≤—Ç–æ—Ä: "${author}"`);
        console.log(`   –í–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤–æ: "${publisher}"`);
        console.log(`   –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: "${category}"`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        const allData = {};
        booksSheet.headerValues.forEach(header => {
          const value = row.get(header);
          if (value && value.trim()) {
            allData[header] = value;
          }
        });
        
        if (Object.keys(allData).length > 0) {
          console.log(`   üìã –í—Å–µ –Ω–µ–ø—É—Å—Ç—ã–µ –ø–æ–ª—è:`, JSON.stringify(allData, null, 2));
        } else {
          console.log(`   ‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç–∞—è`);
        }
        console.log('');
      } else {
        console.log(`‚ùå Row ${rowNum} is out of range (total rows: ${allRows.length})`);
      }
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º
    let validBooks = 0;
    let partialBooks = 0;
    let emptyRows = 0;
    
    allRows.forEach((row, index) => {
      const title = (row.get('–ù–∞–∑–≤–∞') || '').trim();
      const author = (row.get('–ê–≤—Ç–æ—Ä') || '').trim();
      
      if (title && author) {
        validBooks++;
      } else if (title || author) {
        partialBooks++;
        console.log(`‚ö†Ô∏è  Partial data at row ${index + 2}: title="${title}", author="${author}"`);
      } else {
        emptyRows++;
      }
    });
    
    console.log('\nüìä Statistics:');
    console.log(`   ‚úÖ Valid books (title + author): ${validBooks}`);
    console.log(`   ‚ö†Ô∏è  Partial books (title OR author): ${partialBooks}`);
    console.log(`   ‚ùå Empty rows: ${emptyRows}`);
    console.log(`   üìö Total rows: ${allRows.length}`);
    
  } catch (error) {
    console.error('‚ùå Error during analysis:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeMissingBooks();