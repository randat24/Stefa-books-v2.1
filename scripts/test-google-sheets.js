const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');
require('dotenv').config({ path: '.env.local' });

async function testGoogleSheets() {
  console.log('üîç Testing Google Sheets connection...\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const clientEmail = process.env.GOOGLE_SHEETS_CLIENT_EMAIL;
  const privateKey = process.env.GOOGLE_SHEETS_PRIVATE_KEY?.replace(/\\n/g, '\n');
  const spreadsheetId = process.env.GOOGLE_SHEETS_SPREADSHEET_ID;
  
  console.log('üìã Environment variables:');
  console.log(`Client Email: ${clientEmail || 'NOT SET'}`);
  console.log(`Private Key: ${privateKey ? 'SET (length: ' + privateKey.length + ')' : 'NOT SET'}`);
  console.log(`Spreadsheet ID: ${spreadsheetId || 'NOT SET'}\n`);
  
  if (!clientEmail || !privateKey || !spreadsheetId) {
    console.log('‚ùå Missing required environment variables');
    return;
  }
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    console.log('üîê Creating JWT authentication...');
    const auth = new JWT({
      email: clientEmail,
      key: privateKey,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    
    console.log('üìÑ Connecting to Google Spreadsheet...');
    const doc = new GoogleSpreadsheet(spreadsheetId, auth);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    await doc.loadInfo();
    
    console.log('‚úÖ Successfully connected to Google Sheets!');
    console.log(`üìä Document title: "${doc.title}"`);
    console.log(`üìã Number of sheets: ${doc.sheetCount}\n`);
    
    console.log('üìë Available sheets:');
    doc.sheetsByIndex.forEach((sheet, index) => {
      console.log(`  ${index + 1}. "${sheet.title}" (${sheet.rowCount} rows, ${sheet.columnCount} columns)`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏—Å—Ç–∞ Books –∏–ª–∏ "–ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥"
    let booksSheet = doc.sheetsByTitle['Books'] || doc.sheetsByTitle['–ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥'];
    
    if (booksSheet) {
      console.log(`\n‚úÖ Found "${booksSheet.title}" sheet!`);
      console.log(`üìè Dimensions: ${booksSheet.rowCount} rows √ó ${booksSheet.columnCount} columns`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞
      await booksSheet.loadHeaderRow();
      console.log('\nüìù Available columns:');
      const headers = booksSheet.headerValues;
      headers.forEach((header, index) => {
        console.log(`  ${index + 1}. ${header}`);
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö
      const allRows = await booksSheet.getRows({ limit: 5 });
      console.log(`\nüìö First 5 books from sheet:`);
      
      allRows.forEach((row, index) => {
        console.log(`\nüìñ Book ${index + 1}:`);
        console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${row.get('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏') || row.get('title') || row.get('–ù–∞–∑–≤–∞') || '(empty)'}`);
        console.log(`  –ê–≤—Ç–æ—Ä: ${row.get('–ê–≤—Ç–æ—Ä') || row.get('author') || row.get('–ü–∏—Å—å–º–µ–Ω–Ω–∏–∫') || '(empty)'}`);
        console.log(`  –ì–æ–¥: ${row.get('–†—ñ–∫ –≤–∏–ø—É—Å–∫—É') || row.get('year') || row.get('–ì–æ–¥') || '(empty)'}`);
        console.log(`  –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ: ${row.get('–í–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤–æ') || row.get('publisher') || row.get('–ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ') || '(empty)'}`);
        console.log(`  –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–ª–æ–∂–∫—É: ${row.get('–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É') || row.get('cover_url') || row.get('–û–±–ª–æ–∂–∫–∞') || '(empty)'}`);
      });
      
      // –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏
      const totalRows = await booksSheet.getRows();
      console.log(`\nüìä Total rows with data: ${totalRows.length}`);
    } else {
      console.log('\n‚ö†Ô∏è  No "Books" or "–ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥" sheet found. Available sheets:', doc.sheetsByIndex.map(s => s.title).join(', '));
    }
    
  } catch (error) {
    console.log('\n‚ùå Error connecting to Google Sheets:');
    console.log('Error type:', error.constructor.name);
    console.log('Error message:', error.message);
    
    if (error.message.includes('403') || error.message.includes('permission')) {
      console.log('\nüí° Solution: Make sure to share the spreadsheet with the service account:');
      console.log(`   ${clientEmail}`);
      console.log('   Give it "Editor" permissions.');
    }
    
    if (error.message.includes('private_key')) {
      console.log('\nüí° Solution: Check the GOOGLE_SHEETS_PRIVATE_KEY format.');
      console.log('   Make sure it includes \\n characters and is properly quoted.');
    }
  }
}

testGoogleSheets().catch(console.error);