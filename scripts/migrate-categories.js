/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –Ω–æ–≤—É—é –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –Ω–æ–≤—ã–µ
const CATEGORY_MAPPING = {
  // –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  'toddlers': { parent: 'age', age_range: '–ù–∞–π–º–µ–Ω—à—ñ' },
  'preschool': { parent: 'age', age_range: '–î–æ—à–∫—ñ–ª—å–Ω–∏–π –≤—ñ–∫' },
  'elementary': { parent: 'age', age_range: '–ú–æ–ª–æ–¥—à–∏–π –≤—ñ–∫' },
  'middle': { parent: 'age', age_range: '–°–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–∫' },
  'teen': { parent: 'age', age_range: '–ü—ñ–¥–ª—ñ—Ç–∫–æ–≤–∏–π –≤—ñ–∫' },

  // –ñ–∞–Ω—Ä–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  'fairy-tales': { parent: 'genre', category: '–ö–∞–∑–∫–∏' },
  'educational': { parent: 'genre', category: '–ü—ñ–∑–Ω–∞–≤–∞–ª—å–Ω—ñ' },
  'detective': { parent: 'genre', category: '–î–µ—Ç–µ–∫—Ç–∏–≤' },
  'adventure': { parent: 'genre', category: '–ü—Ä–∏–≥–æ–¥–∏' },
  'novel': { parent: 'genre', category: '–ü–æ–≤—ñ—Å—Ç—å' },
  'fantasy': { parent: 'genre', category: '–§–µ–Ω—Ç–µ–∑—ñ' },
  'realistic': { parent: 'genre', category: '–†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –ø—Ä–æ–∑–∞' },
  'romance': { parent: 'genre', category: '–†–æ–º–∞–Ω—Ç–∏–∫–∞' },

  // –í–∑—Ä–æ—Å–ª—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  'psychology': { parent: 'adults', category: '–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è —ñ —Å–∞–º–æ—Ä–æ–∑–≤–∏—Ç–æ–∫' },
  'modern-prose': { parent: 'adults', category: '–°—É—á–∞—Å–Ω–∞ –ø—Ä–æ–∑–∞' }
};

async function migrateCategories() {
  console.log('üîÑ Starting category migration...');

  try {
    // 1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    console.log('üìÅ Creating category structure...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏—è –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
    const { data: categories, error: categoriesError } = await supabase
      .from('categories')
      .select('id, slug')
      .limit(5);

    if (categoriesError && categoriesError.code === '42P01') {
      console.log('‚ö†Ô∏è Categories table not found. Please run the migration first:');
      console.log('   Run: 001_create_categories.sql in your Supabase dashboard');
      return;
    }

    if (!categories || categories.length === 0) {
      console.log('‚ö†Ô∏è No categories found. The migration may not have been run yet.');
      return;
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–∏–≥–∏
    console.log('üìö Fetching existing books...');
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, category, age_range');

    if (booksError) {
      throw new Error(`Error fetching books: ${booksError.message}`);
    }

    console.log(`Found ${books?.length || 0} books to migrate`);

    // 3. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
    const { data: allCategories } = await supabase
      .from('categories')
      .select('id, slug, name');

    const categoryMap = allCategories?.reduce((acc, cat) => {
      acc[cat.slug] = cat;
      return acc;
    }, {} as Record<string, any>) || {};

    // 4. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–Ω–∏–≥—É
    let migratedCount = 0;
    let errorCount = 0;

    for (const book of books || []) {
      try {
        const updates: any = {};

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∂–∞–Ω—Ä—É
        if (book.category) {
          // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
          const genreCategory = findCategoryByName(allCategories || [], book.category);
          if (genreCategory) {
            updates.category_id = genreCategory.id;
          }
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if (book.age_range) {
          const ageCategory = findCategoryByName(allCategories || [], book.age_range);
          if (ageCategory) {
            updates.age_category_id = ageCategory.id;
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–∏–≥—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (Object.keys(updates).length > 0) {
          const { error: updateError } = await supabase
            .from('books')
            .update(updates)
            .eq('id', book.id);

          if (updateError) {
            console.error(`‚ùå Error updating book ${book.id}:`, updateError.message);
            errorCount++;
          } else {
            migratedCount++;
          }
        }
      } catch (error) {
        console.error(`‚ùå Error processing book ${book.id}:`, error);
        errorCount++;
      }
    }

    console.log(`‚úÖ Migration completed!`);
    console.log(`   üìà Migrated: ${migratedCount} books`);
    console.log(`   ‚ùå Errors: ${errorCount} books`);

    // 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    console.log('\nüìä Category Statistics:');
    await showCategoryStats();

  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
function findCategoryByName(categories, name) {
  return categories.find(cat => 
    cat.name.toLowerCase() === name.toLowerCase() ||
    cat.name === name
  );
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
async function showCategoryStats() {
  const { data: stats } = await supabase
    .from('books')
    .select(`
      category_id,
      age_category_id,
      available,
      categories!books_category_id_fkey(name),
      age_categories:categories!books_age_category_id_fkey(name)
    `);

  const categoryStats = {};
  const ageStats = {};

  stats?.forEach(book => {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º
    if (book.category_id && book.categories) {
      const categoryName = book.categories.name;
      if (!categoryStats[categoryName]) {
        categoryStats[categoryName] = { total: 0, available: 0 };
      }
      categoryStats[categoryName].total++;
      if (book.available) {
        categoryStats[categoryName].available++;
      }
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    if (book.age_category_id && book.age_categories) {
      const ageName = book.age_categories.name;
      if (!ageStats[ageName]) {
        ageStats[ageName] = { total: 0, available: 0 };
      }
      ageStats[ageName].total++;
      if (book.available) {
        ageStats[ageName].available++;
      }
    }
  });

  console.log('\nüé≠ Genre Categories:');
  Object.entries(categoryStats).forEach(([name, stats]) => {
    console.log(`   ${name}: ${stats.total} books (${stats.available} available)`);
  });

  console.log('\nüë∂ Age Categories:');
  Object.entries(ageStats).forEach(([name, stats]) => {
    console.log(`   ${name}: ${stats.total} books (${stats.available} available)`);
  });
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (import.meta.url === `file://${process.argv[1]}`) {
  migrateCategories();
}