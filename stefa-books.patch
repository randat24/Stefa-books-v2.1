diff --git a/src/app/books/page.tsx b/src/app/books/page.tsx
index 1111111..2222222 100644
--- a/src/app/books/page.tsx
+++ b/src/app/books/page.tsx
@@ -1,3 +1,75 @@
-"export default function BooksPage(){ return <h1 className='text-3xl font-bold'>Каталог книг</h1> }"
+"use client";
+import { useMemo } from "react";
+import { useSearchParams } from "next/navigation";
+import { BOOKS } from "@/lib/mock";
+import BookCard from "@/components/BookCard";
+import RentalForm from "@/components/RentalForm";
+import { useStore } from "@/lib/store";
+
+export default function BooksPage(){
+  const params = useSearchParams();
+  const rentId = params.get("rent") || undefined;
+  const { filters, setQ, setCategory, toggleAvailable } = useStore();
+
+  const categories = useMemo(()=> ["Усі", ...Array.from(new Set(BOOKS.map(b=> b.category)))], []);
+  const list = useMemo(()=> {
+    const q = filters.q.toLowerCase();
+    return BOOKS.filter(b => {
+      const byQ = [b.title, b.author, b.category].some(v => v.toLowerCase().includes(q));
+      const byCat = filters.category === "Усі" ? true : b.category === filters.category;
+      const byAvail = filters.onlyAvailable ? b.available : true;
+      return byQ && byCat && byAvail;
+    });
+  }, [filters]);
+
+  return (
+    <div className="grid gap-8">
+      <div className="grid gap-3 md:grid-cols-[1fr_auto_auto] items-center">
+        <input
+          className="input min-w-[260px]" placeholder="Пошук: назва, автор або категорія"
+          defaultValue={filters.q} onChange={(e)=> setQ(e.currentTarget.value)}
+        />
+        <select className="input" value={filters.category} onChange={(e)=> setCategory(e.target.value as any)}>
+          {categories.map(c=> <option key={c}>{c}</option>)}
+        </select>
+        <label className="flex items-center gap-2 text-sm">
+          <input type="checkbox" checked={filters.onlyAvailable} onChange={toggleAvailable}/>
+          Показувати лише доступні
+        </label>
+      </div>
+
+      <div className="text-sm text-gray-600">Знайдено: <b>{list.length}</b></div>
+
+      <div className="grid lg:grid-cols-[1fr_380px] gap-8">
+        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
+          {list.map(b => <BookCard key={b.id} book={b} />)}
+        </div>
+        <aside className="card p-5 h-max sticky top-24">
+          <h2 className="text-xl font-semibold mb-3">Заявка на оренду</h2>
+          <RentalForm bookId={rentId} />
+        </aside>
+      </div>
+    </div>
+  );
+}
diff --git a/src/app/books/[id]/page.tsx b/src/app/books/[id]/page.tsx
new file mode 100644
--- /dev/null
+++ b/src/app/books/[id]/page.tsx
@@ -0,0 +1,73 @@
+import { notFound } from "next/navigation";
+import Image from "next/image";
+import { BOOKS } from "@/lib/mock";
+import { FavoriteButton } from "@/components/favorites/FavoriteButton";
+import type { Metadata } from "next";
+
+type Params = { id: string };
+
+export async function generateMetadata({ params }: { params: Params }): Promise<Metadata> {
+  const book = BOOKS.find(b => b.id === params.id);
+  if (!book) return { title: "Книга не знайдена" };
+  return {
+    title: `${book.title} — Stefa.Books`,
+    description: `${book.author} • ${book.category}${book.age ? ` • ${book.age}` : ""}`,
+    openGraph: { title: book.title, images: [{ url: book.cover }] }
+  };
+}
+
+export default function BookPage({ params }: { params: Params }) {
+  const book = BOOKS.find(b => b.id === params.id);
+  if (!book) return notFound();
+
+  return (
+    <div className="grid gap-8 lg:grid-cols-[420px_1fr]">
+      <div className="card overflow-hidden">
+        <div className="relative aspect-[3/4]">
+          <Image src={book.cover} alt={book.title} fill className="object-cover" />
+        </div>
+      </div>
+      <div className="grid gap-4">
+        <div className="flex items-start justify-between gap-3">
+          <div>
+            <h1 className="text-3xl font-bold">{book.title}</h1>
+            <p className="text-gray-600">{book.author}</p>
+            <p className="text-sm text-gray-600">{book.category}{book.age ? ` • ${book.age}` : ""}</p>
+  </div>
+          <FavoriteButton id={book.id} />
+        </div>
+        {book.price?.old && <div className="text-sm text-gray-500 line-through">{book.price.old} ₴</div>}
+        <div className="text-2xl font-semibold">{book.price?.current ?? "—"} ₴</div>
+        <div className="flex items-center gap-3 text-sm">
+          <span className={book.available ? "text-green-600" : "text-red-600"}>
+            {book.available ? "Доступна" : "Усі видані"}
+          </span>
+          {book.badges?.length ? <span className="text-gray-600">• {book.badges.join(" • ")}</span> : null}
+        </div>
+        {book.short && <p className="text-gray-800">{book.short}</p>}
+        <div className="grid sm:grid-cols-2 gap-3 pt-2">
+          <a href={`/books?rent=${book.id}`} className="btn-primary text-center">Орендувати</a>
+          <a href="/books" className="btn-ghost text-center">Назад до каталогу</a>
+        </div>
+      </div>
+    </div>
+  );
+}
diff --git a/src/components/BookCard.tsx b/src/components/BookCard.tsx
new file mode 100644
--- /dev/null
+++ b/src/components/BookCard.tsx
@@ -0,0 +1,76 @@
+"use client";
+import Image from "next/image";
+import Link from "next/link";
+import type { Book } from "@/lib/types";
+import { Heart, Share2, Eye, Star } from "lucide-react";
+import { FavoriteButton } from "@/components/favorites/FavoriteButton";
+
+export default function BookCard({ book }: { book: Book }) {
+  return (
+    <div className="group card overflow-hidden relative">
+      <Link href={`/books/${book.id}`} className="relative aspect-[3/4] block">
+        <Image src={book.cover} alt={book.title} fill className="object-cover transition-transform duration-300 group-hover:scale-[1.03]" />
+        <div className="absolute top-3 left-3 flex gap-2">
+          <div className="rounded-full bg-white/90 backdrop-blur text-xs px-2 py-1 border border-black/10">{b}</div>
+        </div>
+        <div className="absolute top-3 right-3 grid gap-2 opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition">
+          {[{I:Heart,l:"В обране"},{I:Share2,l:"Поділитися"},{I:Eye,l:"Перегляд"}].map(({I,l},i)=>(
+            <button key={i} aria-label={l} className="p-2 rounded-full bg-white/90 backdrop-blur border border-black/10 hover:bg-white">
+              <I className="size-4" />
+            </button>
+          ))}
+        </div>
+      </Link>
+      <div className="p-4 grid gap-2">
+        <div className="text-xs uppercase tracking-wide text-gray-600">
+          {book.category}{book.age ? ` • ${book.age}` : ""}
+        </div>
+        <Link href={`/books/${book.id}`} className="font-semibold leading-snug hover:underline">{book.title}</Link>
+        <p className="text-sm text-gray-600">{book.author}</p>
+        {book.short && <p className="text-sm text-gray-700 line-clamp-2">{book.short}</p>}
+        <div className="flex items-center justify-between pt-1">
+          <div className="flex items-center gap-1 text-sm text-yellow-600">
+            {book.rating && <>
+              <Star className="size-4 fill-yellow-400 stroke-yellow-400" />
+              <span className="font-medium">{book.rating.value.toFixed(1)}</span>
+              <span className="text-gray-500">({book.rating.count})</span>
+            </>}
+          </div>
+          <div className="text-right">
+            {book.price?.old && <div className="text-xs text-gray-500 line-through">{book.price.old} ₴</div>}
+            <div className="text-base font-semibold">{book.price?.current ?? "—"} ₴</div>
+          </div>
+        </div>
+        <div className="flex items-center justify-between pt-2">
+          <span className={"text-sm " + (book.available ? "text-green-600" : "text-red-600")}>
+            {book.available ? "Доступна" : "Усі видані"}
+          </span>
+          <div className="flex items-center gap-3">
+            <FavoriteButton id={book.id} />
+            <Link href={`/books?rent=${book.id}`} className="text-sm font-medium underline underline-offset-4">Орендувати</Link>
+          </div>
+        </div>
+      </div>
+    </div>
+  );
+}
diff --git a/src/components/RentalForm.tsx b/src/components/RentalForm.tsx
new file mode 100644
--- /dev/null
+++ b/src/components/RentalForm.tsx
@@ -0,0 +1,92 @@
+"use client";
+import { z } from "zod";
+import { zodResolver } from "@hookform/resolvers/zod";
+import { useForm } from "react-hook-form";
+import { useState } from "react";
+import { Button } from "@/components/ui/button";
+
+const FormSchema = z.object({
+  name: z.string().min(2, "Введіть ім'я"),
+  phone: z.string().min(7, "Введіть телефон"),
+  instagram: z.string().optional(),
+  bookId: z.string().optional(),
+  plan: z.enum(["Mini","Maxi"]).default("Mini"),
+  delivery: z.enum(["Самовивіз","Нова Пошта","Поштомат"]).default("Самовивіз"),
+  address: z.string().optional(),
+  note: z.string().optional(),
+});
+type FormData = z.infer<typeof FormSchema>;
+
+export default function RentalForm({ bookId }: { bookId?: string }) {
+  const [sent, setSent] = useState(false);
+  const { register, handleSubmit, formState: { errors }, reset } = useForm<FormData>({
+    resolver: zodResolver(FormSchema),
+    defaultValues: { plan: "Mini", delivery: "Самовивіз", bookId }
+  });
+
+  const onSubmit = async (data: FormData) => {
+    // TODO: replace with your backend / Supabase function
+    // await fetch('/api/rent', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(data) })
+    setSent(true);
+    reset();
+  };
+
+  if (sent) return (
+    <div className="p-6 rounded-2xl bg-green-50 border border-green-200">
+      <p className="font-medium text-green-900">Заявку надіслано!</p>
+      <p className="p className="text-sm text-green-800 mt-1">Ми зв'яжемося з вами для підтвердження оренди.</p>
+    </div>
+  );
+
+  return (
+    <form onSubmit={handleSubmit(onSubmit)} className="grid gap-4">
+      <div className="grid sm:grid-cols-2 gap-4">
+        <label className="grid gap-1">
+          <span className="text-sm text-gray-600">Ім'я*</span>
+          <input className="input" placeholder="Іван Петренко" {...register("name")} />
+          {errors.name && <span className="text-xs text-red-600">{errors.name.message}</span>}
+        </label>
+        <label className="grid gap-1">
+          <span className="text-sm text-gray-600">Телефон*</span>
+          <input className="input" placeholder="+380 00 000 00 00" {...register("phone")} />
+          {errors.name && <span className="text-xs text-red-600">{errors.phone.message}</span>}
+        </label>
+      </div>
+      <div className="grid sm:grid-cols-2 gap-4">
+        <label className="text-sm text-gray-600">Instagram</span>
+          <input className="input" placeholder="@username" {...register("instagram")} />
+        </label>
+        <label className="grid gap-1">
+          <span className="text-sm text-gray-600">Книга (ID)</span>
+          <input className="input" placeholder="наприклад: 3" {...register("bookId")} />
+        </label>
+      </div>
+      <div className="grid sm:grid-cols-3 gap-4">
+        <label className="grid gap-1">
+          <span className="text-sm text-gray-600">План</span>
+          <select className="input" {...register("plan")}>
+            <option>Mini</option><option>Maxi</option>
+          </select>
+        </label>
+        <label className="grid gap-1">
+          <span className="text-sm text-gray-600">Доставка</span>
+          <select className="input" {...register("delivery")}>
+            <option>Самовивіз</option><option>Нова Пошта</option><option>Поштомат</option>
+          </select>
+        </label>
+        <label className="grid gap-1">
+          <span className="text-sm text-gray-600">Адреса (якщо доставка)</span>
+          <input className="input" placeholder="м. Миколаїв, ..." {...register("address")} />
+        </label>
+      </div>
+      <label className="grid gap-1">
+        <span className="text-sm text-gray-600">Коментар</span>
+        <textarea className="input min-h-[90px]" placeholder="Побажання, час зв'язку" {...register("note")} />
+      </label>
+      <Button type="submit" variant="primary">Надіслати заявку</Button>
+    </form>
+  );
+}
diff --git a/src/components/favorites/FavoriteButton.tsx b/src/components/favorites/FavoriteButton.tsx
new file modeff
--- /dev/null
+++ b/src/components/favorites/FavoriteButton.tsx
@@ -0,0 +1,26 @@
+"use client";
+import { Heart } from "lucide-react";
+import { useFavorites } from "@/lib/favorites";
+import { cn } from "@/lib/cn";
+
+export function FavoriteButton({ id, className }: { id: string; className?: string }) {
+  const has = useFavorites(s => s.has(id));
+  const toggle = useFavorites(s => s.toggle);
+  return (
+    <button
+      aria-pressed={has}
+      aria-label={has ? "В обраному" : "Додати в обране"}
+      onClick={() => toggle(id)}
+      className={cn(
+        "px-3 py-2 rounded-full border border-black/10 bg-white hover:bg-gray-50 inline-flex items-center gap-2",
+        className
+      )}
+      title={has ? "В обраному" : "Додати в обране"}
+    >
+      <Heart className={cn("size-4", has && "fill-red-500 stroke-red-500")} />
+      <span className="text-sm">{has ? "В обраному" : "В обране"}</span>
+    </button>
+  );
+}
diff --git a/src/lib/favorites.ts b/src/lib/favorites.ts
new file mode 100644
--- /dev/null
+++ b/src/lib/favorites.ts
@@ -0,0 +1,26 @@
+import { create } from "zustand";
+
+type FavStore = {
+  ids: Set<string>;
+  toggle: (id: string) => void;
+  has: (id: string) => boolean;
+};
+
+const load = (): Set<string> => {
+  if (typeof window === "undefined") return new Set();
+  try {
+    const raw = localStorage.getItem("stefa_favs");
+    return raw ? new Set(JSON.parse(raw)) : new Set();
+  } catch { return new Set(); }
+};
+
+export const useFavorites = create<FavStore>((set, get) => ({
+  ids: load(),
+  toggle: (id) => {
+    const ids = new Set(get().ids);
+    ids.has(id) ? ids.delete(id) : ids.add(id);
+    set({ ids });
+    if (typeof window !== "undefined") localStorage.setItem("stefa_favs", JSON.stringify(Array.from(ids)));
+  },
+  has: (id) => get().ids.has(id),
+}));
diff --git a/src/lib/types.ts b/src/lib/types.ts
new file mode 100644
--- /dev/null
+++ b/src/lib/types.ts
@@ -0,0 +1,14 @@
+export type Book = {
+  id: string;
+  title: string;
+ author: string;
+  cover: string;
+  category: string;
+  age?: string;
+  available: boolean;
+  price?: { old?: number; current: number };
+  rating?: { value: number; count: number };
+  badges?: ("В тренді"|"Бестселер"|"Знижка")[];
+  short?: string;
+};
diff --git a/src/lib/mock.ts b/src/lib/mock.ts
new file mode 100644
--- /dev/null
+++ b/src/lib/mock.ts
@@ -0,0 +1,37 @@
+import type { Book } from "./types";
+
+export const BOOKS: Book[] = [
+  { id:"1", title:"Емоційний інтелект у дитини", author:"Деніел Ґоулман",
+    cover:"https://picsum.photos/seed/book1/600/800", category:"Психологія", age:"8+", available:true,
+    price:{ old:160, current:120 }, rating:{ value:4.7, count:124 }, badges:["Бестселер","Знижка"],
+    short:"Як допомогти дітям розуміти і керувати емоціями." },
+  { id:"2", title:"Людина в пошуках справжнього сенсу", author:"Віктор Франкл",
+    cover:"https://picsum.photos/seed/book2/600/800", category:"Нон‑фікшн", age:"16+", available:false,
+    price:{ current:110 }, rating:{ value:4.9, count:312 }, badges:["В тренді"],
+    short:"Класична книга про силу смислу і стійкість." },
+  { id:"3", title:"Дино‑пригоди", author:"STEFA.BOX",
+    cover:"https://picsum.photos/seed/book3/600/800", category:"Діти", age:"7+", available:true,
+    price:{ old:100, current:80 }, rating:{ value:4.5, count:58 }, badges:["Знижка"],
+    short:"Весела і пізнавальна книжка про динозаврів." }
+];
diff --git a/src/lib/store.ts b/src/lib/store.ts
new file mode 100644
--- /dev/null
+++ b/src/lib/store.ts
@@ -0,0 +1,17 @@
+import { create } from "zustand";
+
+type Filters = { q: string; category: string | "Усі"; onlyAvailable: boolean };
+type Store = {
+  filters: Filters;
+  setQ: (q: string) => void;
+  setCategory: (c: Filters["category"]) => void;
+ toggleAvailable: () => void;
+};
+
+export const useStore = create<Store>((set) => ({
+  filters: { q: "", category: "Усі", onlyAvailable: false },
+  setQ: (q) => set((s) => ({ filters: { ...s.filters, q } })),
+  setCategory: (category) => set((s) => ({ filters: { ...s.filters, category } })),
+  toggleAvailable: () => set((s) => ({ filters: { ...s.filters, onlyAvailable: !s.filters.onlyAvailable } })),
+}));
