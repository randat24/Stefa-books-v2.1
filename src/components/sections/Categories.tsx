"use client"

import { BookOpen, Brain, Baby, ScrollText, Star, Heart, Wand2, Search, BookMarked, Globe, BookText, GraduationCap, Compass, Palette, Crown } from "lucide-react"
import { useEffect, useState } from "react"
import { fetchCategories, type Category } from "@/lib/api/books"

// –ú–∞–ø–ø–∏–Ω–≥ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é - —Ç–æ—á–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
const getCategoryIcon = (category: string) => {
	const categoryLower = category.toLowerCase()
	
	// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
	if (categoryLower.includes('–Ω–∞–π–º–µ–Ω—à—ñ') || categoryLower.includes('0-3')) return Baby
	if (categoryLower.includes('–¥–æ—à–∫—ñ–ª—å–Ω') || categoryLower.includes('3-6')) return Palette
	if (categoryLower.includes('–º–æ–ª–æ–¥—à') || categoryLower.includes('6-9')) return BookOpen
	if (categoryLower.includes('—Å–µ—Ä–µ–¥–Ω') || categoryLower.includes('9-12')) return ScrollText
	if (categoryLower.includes('–ø—ñ–¥–ª—ñ—Ç–∫–æ–≤') || categoryLower.includes('12+')) return Star
	
	// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∂–∞–Ω—Ä–∞–º
	if (categoryLower.includes('–∫–∞–∑–∫')) return Crown
	if (categoryLower.includes('–ø—ñ–∑–Ω–∞–≤–∞–ª—å–Ω')) return GraduationCap
	if (categoryLower.includes('–¥–µ—Ç–µ–∫—Ç–∏–≤')) return Search
	if (categoryLower.includes('–ø—Ä–∏–≥–æ–¥–∏')) return Compass
	if (categoryLower.includes('–ø–æ–≤—ñ—Å—Ç—å')) return BookText
	if (categoryLower.includes('—Ñ–µ–Ω—Ç–µ–∑—ñ')) return Wand2
	if (categoryLower.includes('—Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω')) return Globe
	if (categoryLower.includes('—Ä–æ–º–∞–Ω—Ç–∏–∫')) return Heart
	
	// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö
	if (categoryLower.includes('–ø—Å–∏—Ö–æ–ª–æ–≥—ñ')) return Brain
	if (categoryLower.includes('—Å—É—á–∞—Å–Ω')) return BookMarked
	
	return BookOpen // Default icon
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é - —Ç–æ—á–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
const getCategoryDescription = (category: string) => {
	const categoryLower = category.toLowerCase()
	
	// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
	if (categoryLower.includes('–Ω–∞–π–º–µ–Ω—à—ñ') || categoryLower.includes('0-3')) return "–ö–Ω–∏–≥–∏ –¥–ª—è –Ω–∞–π–º–µ–Ω—à–∏—Ö —á–∏—Ç–∞—á—ñ–≤"
	if (categoryLower.includes('–¥–æ—à–∫—ñ–ª—å–Ω') || categoryLower.includes('3-6')) return "–†–æ–∑–≤–∏–≤–∞—é—á—ñ –∫–Ω–∏–≥–∏ –¥–ª—è –¥–æ—à–∫—ñ–ª—å–Ω—è—Ç"
	if (categoryLower.includes('–º–æ–ª–æ–¥—à') || categoryLower.includes('6-9')) return "–ö–Ω–∏–≥–∏ –¥–ª—è –º–æ–ª–æ–¥—à–∏—Ö —à–∫–æ–ª—è—Ä—ñ–≤"
	if (categoryLower.includes('—Å–µ—Ä–µ–¥–Ω') || categoryLower.includes('9-12')) return "–õ—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤—ñ–∫—É"
	if (categoryLower.includes('–ø—ñ–¥–ª—ñ—Ç–∫–æ–≤') || categoryLower.includes('12+')) return "–ö–Ω–∏–≥–∏ –¥–ª—è –ø—ñ–¥–ª—ñ—Ç–∫—ñ–≤ —Ç–∞ –º–æ–ª–æ–¥—ñ"
	
	// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∂–∞–Ω—Ä–∞–º
	if (categoryLower.includes('–∫–∞–∑–∫')) return "–ß–∞—Ä—ñ–≤–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–∞ –∫–∞–∑–∫–∏ –¥–ª—è –¥—ñ—Ç–µ–π"
	if (categoryLower.includes('–ø—ñ–∑–Ω–∞–≤–∞–ª—å–Ω')) return "–ü—ñ–∑–Ω–∞–≤–∞–ª—å–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–æ–∑–≤–∏—Ç–∫—É"
	if (categoryLower.includes('–¥–µ—Ç–µ–∫—Ç–∏–≤')) return "–ó–∞–≥–∞–¥–∫–æ–≤—ñ –ø—Ä–∏–≥–æ–¥–∏ —Ç–∞ –¥–µ—Ç–µ–∫—Ç–∏–≤–∏"
	if (categoryLower.includes('–ø—Ä–∏–≥–æ–¥–∏')) return "–ó–∞—Ö–æ–ø–ª—é—é—á—ñ –ø–æ–¥–æ—Ä–æ–∂—ñ —Ç–∞ –ø—Ä–∏–≥–æ–¥–∏"
	if (categoryLower.includes('–ø–æ–≤—ñ—Å—Ç—å')) return "–•—É–¥–æ–∂–Ω—è –ø—Ä–æ–∑–∞ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è"
	if (categoryLower.includes('—Ñ–µ–Ω—Ç–µ–∑—ñ')) return "–§–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω—ñ —Å–≤—ñ—Ç–∏ —Ç–∞ –º–∞–≥—ñ—è"
	if (categoryLower.includes('—Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω')) return "–†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –ø—Ä–æ –∂–∏—Ç—Ç—è"
	if (categoryLower.includes('—Ä–æ–º–∞–Ω—Ç–∏–∫')) return "–†–æ–º–∞–Ω—Ç–∏—á–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–∞ –ø–æ—á—É—Ç—Ç—è"
	
	// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö
	if (categoryLower.includes('–ø—Å–∏—Ö–æ–ª–æ–≥—ñ')) return "–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è —Ç–∞ —Å–∞–º–æ—Ä–æ–∑–≤–∏—Ç–æ–∫"
	if (categoryLower.includes('—Å—É—á–∞—Å–Ω')) return "–°—É—á–∞—Å–Ω–∞ –ø—Ä–æ–∑–∞ —Ç–∞ –±–µ–ª–µ—Ç—Ä–∏—Å—Ç–∏–∫–∞"
	
	return "–ó–∞—Ö–æ–ø–ª—é—é—á–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è"
}

export default function Categories() {
	const [categories, setCategories] = useState<Category[]>([])
	const [loading, setLoading] = useState(true)

	useEffect(() => {
		const loadCategories = async () => {
			try {
				console.log('üîÑ Categories: Starting to load categories...')
				const response = await fetchCategories()
				console.log('üìä Categories: Response:', { 
					success: response.success, 
					count: response.count, 
					hasData: !!response.data,
					error: response.error 
				})
				if (response.success) {
					setCategories(response.data)
					console.log('‚úÖ Categories: Categories loaded successfully:', response.data.length)
				} else {
					console.error('‚ùå Categories: Failed to load categories:', response.error)
				}
			} catch (error) {
				console.error('‚ùå Categories: Error loading categories:', error)
			} finally {
				setLoading(false)
				console.log('üèÅ Categories: Data loading completed')
			}
		}

		loadCategories()
	}, [])

	// Validate categories data
	if (categories.length > 0) {
		console.log('üìä Categories: Valid categories data:', categories)
	}

	const navigateToBooks = (category?: string) => {
		if (category) {
			window.location.href = `/books?category=${encodeURIComponent(category)}`
		} else {
			window.location.href = '/books'
		}
	}


	if (loading) {
		return (
			<section id="catalog" className="py-10 lg:py-16">
				<div className="flex items-end justify-between mb-5">
					<div>
						<h2 className="h2">–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó</h2>
						<p className="text-slate-600">–í–∏–±–∏—Ä–∞–π –Ω–∞—Å—Ç—Ä—ñ–π —á–∏—Ç–∞–Ω–Ω—è ‚Äî —ñ –≤–ø–µ—Ä–µ–¥!</p>
					</div>
				</div>
				<div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
					{[...Array(6)].map((_, i) => (
						<div key={i} className="rounded-3xl border border-slate-200 bg-white p-6 animate-pulse">
							<div className="flex items-start gap-4">
								<div className="size-12 rounded-2xl bg-slate-200"></div>
								<div className="grid gap-2 flex-1">
									<div className="h-5 bg-slate-200 rounded w-3/4"></div>
									<div className="h-4 bg-slate-200 rounded w-full"></div>
								</div>
							</div>
						</div>
					))}
				</div>
			</section>
		);
	}

	// Don't render if no categories
	if (categories.length === 0) {
		console.log('üìÇ Categories: No categories to display')
		return (
			<section id="catalog" className="py-10 lg:py-16">
				<div className="flex items-end justify-between mb-5">
					<div>
						<h2 className="h2">–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó</h2>
						<p className="text-slate-600">–í–∏–±–∏—Ä–∞–π –Ω–∞—Å—Ç—Ä—ñ–π —á–∏—Ç–∞–Ω–Ω—è ‚Äî —ñ –≤–ø–µ—Ä–µ–¥!</p>
					</div>
				</div>
				<div className="text-center py-12">
					<p className="text-lg text-slate-600 mb-4">–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è</p>
					<p className="text-sm text-slate-500">–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞...</p>
				</div>
			</section>
		);
	}

	console.log('üìä Categories: Rendering with', categories.length, 'categories')

	return (
		<section id="catalog" className="py-10 lg:py-16">
			<div className="flex items-end justify-between mb-5">
				<div>
					<h2 className="h2">–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó</h2>
					<p className="text-slate-600">–í–∏–±–∏—Ä–∞–π –Ω–∞—Å—Ç—Ä—ñ–π —á–∏—Ç–∞–Ω–Ω—è ‚Äî —ñ –≤–ø–µ—Ä–µ–¥!</p>
				</div>
				<button 
					onClick={() => navigateToBooks()}
					className="inline-flex items-center justify-center rounded-full font-semibold h-10 px-4 bg-transparent text-slate-900 hover:bg-slate-50 transition-colors"
				>
					–î–∏–≤–∏—Ç–∏—Å—å –≤—Å—ñ –∫–Ω–∏–≥–∏
				</button>
			</div>

			{/* –≤–µ–ª–∏–∫—ñ –ø–ª–∏—Ç–∫–∏ */}
			<div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
				{categories.slice(0, 6).map((category) => {
					const Icon = getCategoryIcon(category.name)
					const desc = getCategoryDescription(category.name)
					const isAgeCategory = category.name.toLowerCase().includes('–Ω–∞–π–º–µ–Ω—à—ñ') || category.name.toLowerCase().includes('–¥–æ—à–∫—ñ–ª—å–Ω') || category.name.toLowerCase().includes('–º–æ–ª–æ–¥—à') || category.name.toLowerCase().includes('—Å–µ—Ä–µ–¥–Ω') || category.name.toLowerCase().includes('–ø—ñ–¥–ª—ñ—Ç–∫–æ–≤')
					const isFantasyCategory = category.name.toLowerCase().includes('–∫–∞–∑–∫') || category.name.toLowerCase().includes('—Ñ–µ–Ω—Ç–µ–∑—ñ')
					const isEducationalCategory = category.name.toLowerCase().includes('–ø—ñ–∑–Ω–∞–≤–∞–ª—å–Ω') || category.name.toLowerCase().includes('–ø—Å–∏—Ö–æ–ª–æ–≥—ñ')
					const isAdventureCategory = category.name.toLowerCase().includes('–¥–µ—Ç–µ–∫—Ç–∏–≤') || category.name.toLowerCase().includes('–ø—Ä–∏–≥–æ–¥–∏')
					
					return (
						<button
							key={category.id}
							onClick={() => navigateToBooks(category.name)}
							className="group relative overflow-hidden rounded-3xl border border-slate-200 bg-white p-6 hover:shadow-soft transition text-left hover:scale-[1.02]"
						>
							{/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É */}
							<div className="absolute top-3 right-3">
								<span className="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium bg-white/80 border border-white/50 shadow-sm">
									<BookOpen className="size-3" />
									{category.book_count}
								</span>
							</div>

							<div className="flex items-start gap-4">
								<div className={`size-12 rounded-2xl border-2 grid place-items-center ${
									isAgeCategory ? "border-yellow-200 bg-yellow-50" :
									isFantasyCategory ? "border-purple-200 bg-purple-50" :
									isEducationalCategory ? "border-blue-200 bg-blue-50" :
									isAdventureCategory ? "border-red-200 bg-red-50" :
									"border-slate-200 bg-slate-50"
								}`}>
									<Icon className={`size-6 ${
										isAgeCategory ? "text-yellow-600" :
										isFantasyCategory ? "text-purple-600" :
										isEducationalCategory ? "text-blue-600" :
										isAdventureCategory ? "text-red-600" :
										"text-slate-600"
									}`} />
								</div>
								<div className="grid gap-1">
									<h3 className="text-lg font-semibold">{category.name}</h3>
									<p className="text-sm text-slate-600">{desc}</p>
								</div>
							</div>

							<div className="mt-6 inline-flex items-center gap-2 rounded-full bg-black/[.03] px-4 py-2 text-sm border border-black/10">
								–î–∏–≤–∏—Ç–∏—Å—å —É –∫–∞—Ç–∞–ª–æ–∑—ñ
								<svg className="size-4 -mr-0.5 transition -rotate-45 group-hover:rotate-0" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M5 12h14M13 5l7 7-7 7"/></svg>
							</div>
						</button>
					)
				})}
			</div>
		</section>
	)
}
