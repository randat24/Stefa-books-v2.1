import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'

// ============================================================================
// API –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –û–î–ù–û–ô –ö–ù–ò–ì–ò –ü–û ID
// ============================================================================

interface RouteParams {
  params: {
    id: string
  }
}

export async function GET(
  request: NextRequest, 
  { params }: RouteParams
) {
  try {
    const { id } = params
    
    if (!id) {
      return NextResponse.json(
        { success: false, error: 'ID –∫–Ω–∏–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω' },
        { status: 400 }
      )
    }

    console.log(`üìñ API: Fetching book with ID: ${id}`)

    const { data: book, error } = await supabase
      .from('books')
      .select('*')
      .eq('id', id)
      .single()

    if (error) {
      console.error('‚ùå Supabase error:', error)
      
      // –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
      if (error.code === 'PGRST116') {
        return NextResponse.json(
          { success: false, error: '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
          { status: 404 }
        )
      }
      
      return NextResponse.json(
        { success: false, error: error.message },
        { status: 500 }
      )
    }

    console.log(`‚úÖ API: Found book: ${book.title}`)

    return NextResponse.json({
      success: true,
      data: book
    })

  } catch (error) {
    console.error('üí• API error:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    )
  }
}