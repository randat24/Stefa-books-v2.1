import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { logger } from '@/lib/logger';

// ============================================================================
// API –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò
// ============================================================================

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const tree = searchParams.get('tree') === 'true';
    const parentId = searchParams.get('parent_id');
    
    logger.info('üìÇ API: Categories endpoint called', { tree, parentId });

    if (tree) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π 
        const { data: categories, error } = await supabase
          .from('categories')
          .select('*')
          .order('name');

        if (error) {
          logger.error('Error fetching categories from DB', error);
          // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
          if (error.message.includes('does not exist') || error.code === 'PGRST116' || error.code === 'PGRST301') {
            logger.info('üìÇ Categories table not ready yet, returning mock data');
            const mockCategoryTree = [
              {
                id: 'mock-age',
                name: '–ó–∞ –≤—ñ–∫–æ–º',
                slug: 'age',
                parent_id: null,
                icon: 'üë∂',
                color: '#F59E0B',
                sort_order: 1,
                is_active: true,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
                children: [
                  {
                    id: 'mock-preschool',
                    name: '–î–æ—à–∫—ñ–ª—å–Ω–∏–π –≤—ñ–∫',
                    slug: 'preschool',
                    parent_id: 'mock-age',
                    icon: 'üß∏',
                    color: '#FDE68A',
                    sort_order: 1,
                    is_active: true,
                    created_at: new Date().toISOString(),
                    updated_at: new Date().toISOString(),
                    children: []
                  }
                ]
              },
              {
                id: 'mock-genre',
                name: '–ó–∞ –∂–∞–Ω—Ä–æ–º',
                slug: 'genre',
                parent_id: null,
                icon: 'üìö',
                color: '#10B981',
                sort_order: 2,
                is_active: true,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
                children: [
                  {
                    id: 'mock-fairy-tales',
                    name: '–ö–∞–∑–∫–∏',
                    slug: 'fairy-tales',
                    parent_id: 'mock-genre',
                    icon: 'üßö',
                    color: '#D1FAE5',
                    sort_order: 1,
                    is_active: true,
                    created_at: new Date().toISOString(),
                    updated_at: new Date().toISOString(),
                    children: []
                  }
                ]
              }
            ];
            return NextResponse.json({
              success: true,
              data: mockCategoryTree,
              count: mockCategoryTree.length
            });
          }
          
          logger.error('Error fetching categories', error);
          return NextResponse.json(
            { success: false, error: error.message },
            { status: 500 }
          );
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock
        if (!categories || categories.length === 0) {
          logger.info('üìÇ Categories table empty, returning mock data');
          const mockCategoryTree = [
            {
              id: 'mock-age',
              name: '–ó–∞ –≤—ñ–∫–æ–º',
              slug: 'age',
              parent_id: null,
              icon: 'üë∂',
              color: '#F59E0B',
              sort_order: 1,
              is_active: true,
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString(),
              children: [
                {
                  id: 'mock-preschool',
                  name: '–î–æ—à–∫—ñ–ª—å–Ω–∏–π –≤—ñ–∫',
                  slug: 'preschool',
                  parent_id: 'mock-age',
                  icon: 'üß∏',
                  color: '#FDE68A',
                  sort_order: 1,
                  is_active: true,
                  created_at: new Date().toISOString(),
                  updated_at: new Date().toISOString(),
                  children: []
                }
              ]
            },
            {
              id: 'mock-genre',
              name: '–ó–∞ –∂–∞–Ω—Ä–æ–º',
              slug: 'genre',
              parent_id: null,
              icon: 'üìö',
              color: '#10B981',
              sort_order: 2,
              is_active: true,
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString(),
              children: [
                {
                  id: 'mock-fairy-tales',
                  name: '–ö–∞–∑–∫–∏',
                  slug: 'fairy-tales',
                  parent_id: 'mock-genre',
                  icon: 'üßö',
                  color: '#D1FAE5',
                  sort_order: 1,
                  is_active: true,
                  created_at: new Date().toISOString(),
                  updated_at: new Date().toISOString(),
                  children: []
                }
              ]
            }
          ];
          return NextResponse.json({
            success: true,
            data: mockCategoryTree,
            count: mockCategoryTree.length
          });
        }

        // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –∏–∑ –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
        const categoryTree = buildCategoryTree(categories || []);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–µ –Ω–µ—Ç 'catalog')
        const rootCategories = categoryTree.filter(cat => 
          cat.parent_id === null
        );

        logger.info(`‚úÖ API: Built category tree with ${rootCategories.length} root categories`);
        return NextResponse.json({
          success: true,
          data: rootCategories,
          count: rootCategories.length
        });
      } catch (err) {
        logger.error('Unexpected error fetching category tree', err);
        return NextResponse.json(
          { success: false, error: 'Database not ready' },
          { status: 503 }
        );
      }
    }

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω parent_id, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (parentId) {
      try {
        const { data: children, error } = await supabase
          .from('categories')
          .select('*')
          .eq('parent_id', parentId)
          .order('sort_order')
          .order('name');

        if (error && (error.message.includes('does not exist') || error.code === 'PGRST116')) {
          return NextResponse.json({
            success: true,
            data: [],
            count: 0
          });
        }

        if (error) {
          logger.error('Error fetching child categories', error);
          return NextResponse.json(
            { success: false, error: error.message },
            { status: 500 }
          );
        }

        logger.info(`‚úÖ API: Found ${children?.length || 0} child categories for parent ${parentId}`);
        return NextResponse.json({
          success: true,
          data: children || [],
          count: children?.length || 0
        });
      } catch (err) {
        return NextResponse.json({
          success: true,
          data: [],
          count: 0
        });
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    try {
      const { data: allCategories, error } = await supabase
        .from('categories')
        .select('*')
        .order('sort_order')
        .order('name');

      if (error && (error.message.includes('does not exist') || error.code === 'PGRST116')) {
        return NextResponse.json({
          success: true,
          data: [],
          count: 0
        });
      }

      if (error) {
        logger.error('Error fetching all categories', error);
        return NextResponse.json(
          { success: false, error: error.message },
          { status: 500 }
        );
      }

      logger.info(`‚úÖ API: Found ${allCategories?.length || 0} total categories`);
      return NextResponse.json({
        success: true,
        data: allCategories || [],
        count: allCategories?.length || 0
      });
    } catch (err) {
      return NextResponse.json({
        success: true,
        data: [],
        count: 0
      });
    }

  } catch (error) {
    logger.error('API error', error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}

// ============================================================================
// –ü–û–õ–£–ß–ï–ù–ò–ï –•–õ–ï–ë–ù–´–• –ö–†–û–®–ï–ö –î–õ–Ø –ö–ê–¢–ï–ì–û–†–ò–ò
// ============================================================================

export async function POST(request: NextRequest) {
  try {
    const { action, category_id } = await request.json();
    
    if (action === 'get_breadcrumbs') {
      logger.info('üìç API: Breadcrumbs endpoint called', { category_id });
      
      if (!category_id) {
        return NextResponse.json(
          { success: false, error: 'category_id is required' },
          { status: 400 }
        );
      }

      // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
      logger.info(`üìç API: Breadcrumbs temporarily disabled until DB migration`);
      return NextResponse.json({
        success: true,
        data: []
      });
    }

    return NextResponse.json(
      { success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' },
      { status: 400 }
    );

  } catch (error) {
    logger.error('API error', error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
 */
function buildCategoryTree(flatList: any[]) {
  const itemsById: Record<string, any> = {};
  const rootItems: any[] = [];

  // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  flatList.forEach(item => {
    itemsById[item.id] = {
      ...item,
      children: []
    };
  });

  // –ó–∞—Ç–µ–º —Å—Ç—Ä–æ–∏–º –∏–µ—Ä–∞—Ä—Ö–∏—é
  flatList.forEach(item => {
    const currentItem = itemsById[item.id];
    
    if (item.parent_id && itemsById[item.parent_id]) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
      if (!itemsById[item.parent_id].children) {
        itemsById[item.parent_id].children = [];
      }
      itemsById[item.parent_id].children.push(currentItem);
    } else {
      // –≠—Ç–æ –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
      rootItems.push(currentItem);
    }
  });

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–π –ø–æ sort_order
  Object.values(itemsById).forEach(item => {
    if (item.children && item.children.length > 0) {
      item.children.sort((a: any, b: any) => a.sort_order - b.sort_order);
    }
  });

  return rootItems.sort((a, b) => a.sort_order - b.sort_order);
}