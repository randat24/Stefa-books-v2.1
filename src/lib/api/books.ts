import type { Book } from '@/lib/supabase'

// ============================================================================
// –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –ë–ò–ë–õ–ò–û–¢–ï–ö–ê –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–ù–ò–ì–ê–ú–ò
// ============================================================================

export interface BooksFilter {
  category?: string
  search?: string
  limit?: number
  available_only?: boolean
}

export interface BooksResponse {
  success: boolean
  data: Book[]
  count: number
  error?: string
}

export interface BookResponse {
  success: boolean
  data?: Book
  error?: string
}

export interface CategoriesResponse {
  success: boolean
  data: string[]
  count: number
  error?: string
}

export interface CategoryStats {
  name: string
  total: number
  available: number
}

export interface CategoriesStatsResponse {
  success: boolean
  data: CategoryStats[]
  count: number
  error?: string
}

// ============================================================================
// –£–¢–ò–õ–ò–¢–´ –î–õ–Ø URL
// ============================================================================

function getBaseUrl(): string {
  // Server-side: use process.env
  if (typeof window === 'undefined') {
    return process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'
  }
  // Client-side: use window.location
  return window.location.origin
}

function buildApiUrl(endpoint: string): string {
  const baseUrl = getBaseUrl()
  return `${baseUrl}${endpoint}`
}

// ============================================================================
// –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ö–ù–ò–ì
// ============================================================================

export async function fetchBooks(filters: BooksFilter = {}): Promise<BooksResponse> {
  try {
    const params = new URLSearchParams()
    
    if (filters.category && filters.category !== 'all') {
      params.append('category', filters.category)
    }
    
    if (filters.search) {
      params.append('search', filters.search)
    }
    
    if (filters.limit) {
      params.append('limit', filters.limit.toString())
    }
    
    if (filters.available_only) {
      params.append('available_only', 'true')
    }

    const endpoint = `/api/books?${params.toString()}`
    const url = buildApiUrl(endpoint)

    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    })

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }

    const result = await response.json()
    
    if (!result.success) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥')
    }

    
    return result

  } catch (error) {
    return {
      success: false,
      data: [],
      count: 0,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }
  }
}

// ============================================================================
// –ü–û–õ–£–ß–ï–ù–ò–ï –û–î–ù–û–ô –ö–ù–ò–ì–ò
// ============================================================================

export async function fetchBook(id: string): Promise<BookResponse> {
  try {
    if (!id) {
      throw new Error('ID –∫–Ω–∏–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω')
    }

    console.log(`üìñ Client: Fetching book with ID: ${id}`)

    const endpoint = `/api/books/${id}`
    const url = buildApiUrl(endpoint)

    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    })

    if (!response.ok) {
      if (response.status === 404) {
        throw new Error('–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      }
      throw new Error(`HTTP error! status: ${response.status}`)
    }

    const result = await response.json()
    
    if (!result.success) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏')
    }

    console.log(`‚úÖ Client: Received book: ${result.data.title}`)
    
    return result

  } catch (error) {
    console.error('üí• Client: Error fetching book:', error)
    return {
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }
  }
}

// ============================================================================
// –ü–û–õ–£–ß–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô
// ============================================================================

export async function fetchCategories(): Promise<CategoriesResponse> {
  try {
    console.log('üìÇ Client: Fetching categories')

    const endpoint = '/api/books'
    const url = buildApiUrl(endpoint)

    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ action: 'get_categories' })
    })

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }

    const result = await response.json()
    
    if (!result.success) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
    }

    console.log(`‚úÖ Client: Received ${result.count} categories`)
    
    return result

  } catch (error) {
    console.error('üí• Client: Error fetching categories:', error)
    return {
      success: false,
      data: [],
      count: 0,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }
  }
}

// ============================================================================
// –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú
// ============================================================================

export async function fetchCategoriesStats(): Promise<CategoriesStatsResponse> {
  try {
    console.log('üìä Client: Fetching categories with stats')

    const endpoint = '/api/books'
    const url = buildApiUrl(endpoint)

    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ action: 'get_categories_stats' })
    })

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }

    const result = await response.json()
    
    if (!result.success) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
    }

    console.log(`‚úÖ Client: Received ${result.count} categories with stats`)
    
    return result

  } catch (error) {
    console.error('üí• Client: Error fetching categories stats:', error)
    return {
      success: false,
      data: [],
      count: 0,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }
  }
}

// ============================================================================
// –£–¢–ò–õ–ò–¢–´
// ============================================================================

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏ (–¥–æ—Å—Ç—É–ø–Ω—ã–µ, —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º)
 */
export async function fetchPopularBooks(limit = 8): Promise<BooksResponse> {
  return fetchBooks({
    available_only: true,
    limit
  })
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –∫–Ω–∏–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ)
 */
export async function fetchNewBooks(limit = 12): Promise<BooksResponse> {
  return fetchBooks({
    limit
  })
}

/**
 * –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É
 */
export async function searchBooks(query: string, limit = 20): Promise<BooksResponse> {
  if (!query.trim()) {
    return {
      success: true,
      data: [],
      count: 0
    }
  }

  return fetchBooks({
    search: query.trim(),
    limit
  })
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export async function fetchBooksByCategory(category: string, limit?: number): Promise<BooksResponse> {
  return fetchBooks({
    category,
    limit
  })
}